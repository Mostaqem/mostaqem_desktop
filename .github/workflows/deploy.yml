name: Deploying
on:
  release:
    types: [ released ]

  workflow_dispatch:  

jobs:
  release_winget:
    name: Updating to winget
    runs-on: windows-latest
    steps:
      - name: Get Latest Version
        id: get_version
        run: |
          $tag = (Invoke-RestMethod -Uri "https://api.github.com/repos/Mostaqem/mostaqem_desktop/releases/latest").tag_name
          $version = $tag -replace '^v', ''
          echo "LATEST_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
        shell: pwsh 

      - name: Installing Komac
        run: winget install komac

      - name: Publishing Mostaqem to Winget
        run: |
          komac update Mostaqem.Mostaqem --version $env:LATEST_VERSION `
            --urls https://github.com/Mostaqem/mostaqem_desktop/releases/latest/download/mostaqem-windows-setup.exe `
            --submit --token ${{ secrets.PAT }}
        shell: pwsh

  update-aur:
    name: Updating to AUR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH Key for AUR
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Install Dependencies (Ubuntu)
        run: sudo apt update && sudo apt install -y jq git

      - name: Clone AUR package repository
        env:
          AUR_REPO: "mostaqem"
        run: |
          git clone ssh://aur@aur.archlinux.org/$AUR_REPO.git aur-package
          cd aur-package
          git config user.name "mezopeeta"
          git config user.email ${{ secrets.EMAIL }}

      - name: Get latest release version
        run: |
          latest_version=$(curl -s https://api.github.com/repos/mostaqem/mostaqem_desktop/releases/latest | jq -r .tag_name | sed 's/^v//')
          echo "LATEST_VERSION=$latest_version" >> $GITHUB_ENV

      - name: Get current PKGBUILD version
        run: |
          cd aur-package
          current_version=$(grep -Po '(?<=pkgver=).*' PKGBUILD)
          current_pkgrel=$(grep -Po '(?<=pkgrel=).*' PKGBUILD)
          echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV
          echo "CURRENT_PKGREL=$current_pkgrel" >> $GITHUB_ENV

      - name: Update PKGBUILD
        run: |
          cd aur-package
          if [[ "$LATEST_VERSION" != "$CURRENT_VERSION" ]]; then
            echo "New version detected! Updating pkgver and resetting pkgrel to 1."
            sed -i "s/pkgver=.*/pkgver=$LATEST_VERSION/" PKGBUILD
            sed -i "s/pkgrel=.*/pkgrel=1/" PKGBUILD
          else
            echo "Same version detected! Incrementing pkgrel."
            new_pkgrel=$((CURRENT_PKGREL + 1))
            sed -i "s/pkgrel=.*/pkgrel=$new_pkgrel/" PKGBUILD
          fi
          updpkgsums

      - name: Commit and push changes
        run: |
          cd aur-package
          git add PKGBUILD
          git commit -m "Update AUR package to version $LATEST_VERSION (pkgrel=$CURRENT_PKGREL)"
          git push
        env:
          GIT_SSH_COMMAND: "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no"

      - name: Cleanup
        run: rm -rf aur-package